"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/consola";
exports.ids = ["vendor-chunks/consola"];
exports.modules = {

/***/ "(rsc)/./node_modules/consola/dist/core.mjs":
/*!********************************************!*\
  !*** ./node_modules/consola/dist/core.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Consola: () => (/* binding */ Consola),\n/* harmony export */   LogLevels: () => (/* binding */ LogLevels),\n/* harmony export */   LogTypes: () => (/* binding */ LogTypes),\n/* harmony export */   createConsola: () => (/* binding */ createConsola)\n/* harmony export */ });\nconst LogLevels = {\n    silent: Number.NEGATIVE_INFINITY,\n    fatal: 0,\n    error: 0,\n    warn: 1,\n    log: 2,\n    info: 3,\n    success: 3,\n    fail: 3,\n    ready: 3,\n    start: 3,\n    box: 3,\n    debug: 4,\n    trace: 5,\n    verbose: Number.POSITIVE_INFINITY\n};\nconst LogTypes = {\n    // Silent\n    silent: {\n        level: -1\n    },\n    // Level 0\n    fatal: {\n        level: LogLevels.fatal\n    },\n    error: {\n        level: LogLevels.error\n    },\n    // Level 1\n    warn: {\n        level: LogLevels.warn\n    },\n    // Level 2\n    log: {\n        level: LogLevels.log\n    },\n    // Level 3\n    info: {\n        level: LogLevels.info\n    },\n    success: {\n        level: LogLevels.success\n    },\n    fail: {\n        level: LogLevels.fail\n    },\n    ready: {\n        level: LogLevels.info\n    },\n    start: {\n        level: LogLevels.info\n    },\n    box: {\n        level: LogLevels.info\n    },\n    // Level 4\n    debug: {\n        level: LogLevels.debug\n    },\n    // Level 5\n    trace: {\n        level: LogLevels.trace\n    },\n    // Verbose\n    verbose: {\n        level: LogLevels.verbose\n    }\n};\nfunction isObject(value) {\n    return value !== null && typeof value === \"object\";\n}\nfunction _defu(baseObject, defaults, namespace = \".\", merger) {\n    if (!isObject(defaults)) {\n        return _defu(baseObject, {}, namespace, merger);\n    }\n    const object = Object.assign({}, defaults);\n    for(const key in baseObject){\n        if (key === \"__proto__\" || key === \"constructor\") {\n            continue;\n        }\n        const value = baseObject[key];\n        if (value === null || value === void 0) {\n            continue;\n        }\n        if (merger && merger(object, key, value, namespace)) {\n            continue;\n        }\n        if (Array.isArray(value) && Array.isArray(object[key])) {\n            object[key] = [\n                ...value,\n                ...object[key]\n            ];\n        } else if (isObject(value) && isObject(object[key])) {\n            object[key] = _defu(value, object[key], (namespace ? `${namespace}.` : \"\") + key.toString(), merger);\n        } else {\n            object[key] = value;\n        }\n    }\n    return object;\n}\nfunction createDefu(merger) {\n    return (...arguments_)=>// eslint-disable-next-line unicorn/no-array-reduce\n        arguments_.reduce((p, c)=>_defu(p, c, \"\", merger), {});\n}\nconst defu = createDefu();\nfunction isPlainObject(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\n}\nfunction isLogObj(arg) {\n    if (!isPlainObject(arg)) {\n        return false;\n    }\n    if (!arg.message && !arg.args) {\n        return false;\n    }\n    if (arg.stack) {\n        return false;\n    }\n    return true;\n}\nlet paused = false;\nconst queue = [];\nclass Consola {\n    constructor(options = {}){\n        const types = options.types || LogTypes;\n        this.options = defu({\n            ...options,\n            defaults: {\n                ...options.defaults\n            },\n            level: _normalizeLogLevel(options.level, types),\n            reporters: [\n                ...options.reporters || []\n            ]\n        }, {\n            types: LogTypes,\n            throttle: 1e3,\n            throttleMin: 5,\n            formatOptions: {\n                date: true,\n                colors: false,\n                compact: true\n            }\n        });\n        for(const type in types){\n            const defaults = {\n                type,\n                ...this.options.defaults,\n                ...types[type]\n            };\n            this[type] = this._wrapLogFn(defaults);\n            this[type].raw = this._wrapLogFn(defaults, true);\n        }\n        if (this.options.mockFn) {\n            this.mockTypes();\n        }\n        this._lastLog = {};\n    }\n    get level() {\n        return this.options.level;\n    }\n    set level(level) {\n        this.options.level = _normalizeLogLevel(level, this.options.types, this.options.level);\n    }\n    prompt(message, opts) {\n        if (!this.options.prompt) {\n            throw new Error(\"prompt is not supported!\");\n        }\n        return this.options.prompt(message, opts);\n    }\n    create(options) {\n        const instance = new Consola({\n            ...this.options,\n            ...options\n        });\n        if (this._mockFn) {\n            instance.mockTypes(this._mockFn);\n        }\n        return instance;\n    }\n    withDefaults(defaults) {\n        return this.create({\n            ...this.options,\n            defaults: {\n                ...this.options.defaults,\n                ...defaults\n            }\n        });\n    }\n    withTag(tag) {\n        return this.withDefaults({\n            tag: this.options.defaults.tag ? this.options.defaults.tag + \":\" + tag : tag\n        });\n    }\n    addReporter(reporter) {\n        this.options.reporters.push(reporter);\n        return this;\n    }\n    removeReporter(reporter) {\n        if (reporter) {\n            const i = this.options.reporters.indexOf(reporter);\n            if (i >= 0) {\n                return this.options.reporters.splice(i, 1);\n            }\n        } else {\n            this.options.reporters.splice(0);\n        }\n        return this;\n    }\n    setReporters(reporters) {\n        this.options.reporters = Array.isArray(reporters) ? reporters : [\n            reporters\n        ];\n        return this;\n    }\n    wrapAll() {\n        this.wrapConsole();\n        this.wrapStd();\n    }\n    restoreAll() {\n        this.restoreConsole();\n        this.restoreStd();\n    }\n    wrapConsole() {\n        for(const type in this.options.types){\n            if (!console[\"__\" + type]) {\n                console[\"__\" + type] = console[type];\n            }\n            console[type] = this[type].raw;\n        }\n    }\n    restoreConsole() {\n        for(const type in this.options.types){\n            if (console[\"__\" + type]) {\n                console[type] = console[\"__\" + type];\n                delete console[\"__\" + type];\n            }\n        }\n    }\n    wrapStd() {\n        this._wrapStream(this.options.stdout, \"log\");\n        this._wrapStream(this.options.stderr, \"log\");\n    }\n    _wrapStream(stream, type) {\n        if (!stream) {\n            return;\n        }\n        if (!stream.__write) {\n            stream.__write = stream.write;\n        }\n        stream.write = (data)=>{\n            this[type].raw(String(data).trim());\n        };\n    }\n    restoreStd() {\n        this._restoreStream(this.options.stdout);\n        this._restoreStream(this.options.stderr);\n    }\n    _restoreStream(stream) {\n        if (!stream) {\n            return;\n        }\n        if (stream.__write) {\n            stream.write = stream.__write;\n            delete stream.__write;\n        }\n    }\n    pauseLogs() {\n        paused = true;\n    }\n    resumeLogs() {\n        paused = false;\n        const _queue = queue.splice(0);\n        for (const item of _queue){\n            item[0]._logFn(item[1], item[2]);\n        }\n    }\n    mockTypes(mockFn) {\n        const _mockFn = mockFn || this.options.mockFn;\n        this._mockFn = _mockFn;\n        if (typeof _mockFn !== \"function\") {\n            return;\n        }\n        for(const type in this.options.types){\n            this[type] = _mockFn(type, this.options.types[type]) || this[type];\n            this[type].raw = this[type];\n        }\n    }\n    _wrapLogFn(defaults, isRaw) {\n        return (...args)=>{\n            if (paused) {\n                queue.push([\n                    this,\n                    defaults,\n                    args,\n                    isRaw\n                ]);\n                return;\n            }\n            return this._logFn(defaults, args, isRaw);\n        };\n    }\n    _logFn(defaults, args, isRaw) {\n        if ((defaults.level || 0) > this.level) {\n            return false;\n        }\n        const logObj = {\n            date: /* @__PURE__ */ new Date(),\n            args: [],\n            ...defaults,\n            level: _normalizeLogLevel(defaults.level, this.options.types)\n        };\n        if (!isRaw && args.length === 1 && isLogObj(args[0])) {\n            Object.assign(logObj, args[0]);\n        } else {\n            logObj.args = [\n                ...args\n            ];\n        }\n        if (logObj.message) {\n            logObj.args.unshift(logObj.message);\n            delete logObj.message;\n        }\n        if (logObj.additional) {\n            if (!Array.isArray(logObj.additional)) {\n                logObj.additional = logObj.additional.split(\"\\n\");\n            }\n            logObj.args.push(\"\\n\" + logObj.additional.join(\"\\n\"));\n            delete logObj.additional;\n        }\n        logObj.type = typeof logObj.type === \"string\" ? logObj.type.toLowerCase() : \"log\";\n        logObj.tag = typeof logObj.tag === \"string\" ? logObj.tag : \"\";\n        const resolveLog = (newLog = false)=>{\n            const repeated = (this._lastLog.count || 0) - this.options.throttleMin;\n            if (this._lastLog.object && repeated > 0) {\n                const args2 = [\n                    ...this._lastLog.object.args\n                ];\n                if (repeated > 1) {\n                    args2.push(`(repeated ${repeated} times)`);\n                }\n                this._log({\n                    ...this._lastLog.object,\n                    args: args2\n                });\n                this._lastLog.count = 1;\n            }\n            if (newLog) {\n                this._lastLog.object = logObj;\n                this._log(logObj);\n            }\n        };\n        clearTimeout(this._lastLog.timeout);\n        const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;\n        this._lastLog.time = logObj.date;\n        if (diffTime < this.options.throttle) {\n            try {\n                const serializedLog = JSON.stringify([\n                    logObj.type,\n                    logObj.tag,\n                    logObj.args\n                ]);\n                const isSameLog = this._lastLog.serialized === serializedLog;\n                this._lastLog.serialized = serializedLog;\n                if (isSameLog) {\n                    this._lastLog.count = (this._lastLog.count || 0) + 1;\n                    if (this._lastLog.count > this.options.throttleMin) {\n                        this._lastLog.timeout = setTimeout(resolveLog, this.options.throttle);\n                        return;\n                    }\n                }\n            } catch  {}\n        }\n        resolveLog(true);\n    }\n    _log(logObj) {\n        for (const reporter of this.options.reporters){\n            reporter.log(logObj, {\n                options: this.options\n            });\n        }\n    }\n}\nfunction _normalizeLogLevel(input, types = {}, defaultLevel = 3) {\n    if (input === void 0) {\n        return defaultLevel;\n    }\n    if (typeof input === \"number\") {\n        return input;\n    }\n    if (types[input] && types[input].level !== void 0) {\n        return types[input].level;\n    }\n    return defaultLevel;\n}\nConsola.prototype.add = Consola.prototype.addReporter;\nConsola.prototype.remove = Consola.prototype.removeReporter;\nConsola.prototype.clear = Consola.prototype.removeReporter;\nConsola.prototype.withScope = Consola.prototype.withTag;\nConsola.prototype.mock = Consola.prototype.mockTypes;\nConsola.prototype.pause = Consola.prototype.pauseLogs;\nConsola.prototype.resume = Consola.prototype.resumeLogs;\nfunction createConsola(options = {}) {\n    return new Consola(options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/consola/dist/core.mjs\n");

/***/ })

};
;